import { SpotifyGqlApi } from '../../dependencies/hetu_spotify_gql_client/lib/assets/hetu/spotify_gql_api_client.ht'
import { Converters } from '../converter/converter.ht'

class SearchEndpoint {
  var client: SpotifyGqlApi

  construct (this.client)

  get chips -> List { // Set<string>
    // can be tracks, playlists, artists, albums and all
    return ["all", "tracks", "albums", "artists", "playlists"]
  }

  fun all(query: string) {
    return client.search.all(
      query,
      limit: 20
    ).then((data){
      var result = {
        artists: Converters.simpleArtists(data["artists"]),
        albums: Converters.simpleAlbums(data["albums"]),
        tracks: Converters.fullTracks(data["tracks"]),
        playlists: Converters.simplePlaylistsFromLibraryV3(data["playlists"]),
      }.toJson()

      return result
    })
  }

  fun albums(query: string, {offset: int, limit: int}) {
    return client.search.albums(
      query,
      offset: offset,
      limit: limit
    ).then((data) => Converters.paginated(data, (items) => Converters.simpleAlbums(items)))
  }

  fun artists(query: string, {offset: int, limit: int}) {
    return client.search.artists(
      query,
      offset: offset,
      limit: limit
    ).then((data) => Converters.paginated(data, (items) => Converters.simpleArtists(items)))
  }

  fun tracks(query: string, {offset: int, limit: int}) {
    return client.search.tracks(
      query,
      offset: offset,
      limit: limit
    ).then((data) => Converters.paginated(data, (items) => Converters.fullTracks(items)))
  }

  fun playlists(query: string, {offset: int, limit: int}) {
    return client.search.playlists(
      query,
      offset: offset,
      limit: limit
    ).then((data) => Converters.paginated(data, (items) => Converters.simplePlaylistsFromLibraryV3(items)))
  }
}

export { SearchEndpoint }