import { SpotifyGqlApi } from '../../dependencies/hetu_spotify_gql_client/lib/assets/hetu/spotify_gql_api_client.ht'
import { Converters } from '../converter/converter.ht'

class ArtistEndpoint {
  var client: SpotifyGqlApi

  construct (this.client)

  fun getArtist(id: string) {
    return client.artist.getArtist(id).then((data) {
      return Converters.fullArtists([data])[0]
    })
  }

  fun topTracks(id: string, {limit: int, offset: int}) {
    return client.artist.topTracks(id, limit: limit, offset: offset).then((data) {
      return {
        total: data["tracks"].length,
        limit: limit ?? 20,
        nextOffset: (offset ?? 0) + (limit ?? 20),
        hasMore: false,
        items: Converters.fullTracks(data["tracks"])
      }.toJson()
    })
  }

  fun albums(id: string, {offset: int, limit: int}) {
    return client.artist.albums(id, offset: offset, limit: limit).then((data) {
      return Converters.paginated(data, (items) => Converters.simpleAlbums(items))
    })
  }

  fun save(artistIds: List) {
    return client.artist.follow(artistIds).then(() => true)
  }

  fun unsave(artistIds: List) {
    return client.artist.unfollow(artistIds).then(() => true)
  }

  fun related(id: string, {offset: int, limit: int}) {
    return client.artist.related(id).then((data) {
      var artists = Converters.fullArtists(data["artists"])

      return {
        total: artists.length,
        limit: limit ?? 20,
        nextOffset: (offset ?? 0) + (limit ?? 20),
        hasMore: false,
        items: artists
      }.toJson()
    })
  }
}

export { ArtistEndpoint }