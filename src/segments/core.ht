import "module:std" as std

const supportStr = 'Just use this plugin and I am good. No need for supporting me.

**But support the artists.** 

Stop feeding megacorp with money. Directly donate to artists or buy their merch or go to their concerts.
The 30% streaming service cut and other e.g. record labels cut is ridiculous.
Artists (only ones directly involved in making the music) deserve 100% of the money you pay for their music.
Not some greedy corporations and stupid middlemen.
';

var HttpClient = std.HttpClient
var HttpResponse = std.HttpResponse
var RequestOptions = std.RequestOptions
var DateTime = std.DateTime

class CorePlugin {
  var client: HttpClient

  construct () {
    client = HttpClient()
  }

  /// Checks for updates to the plugin.
  /// [currentConfig] is just plugin.json's file content.
  ///
  /// If there's an update available, it will return a map of:
  /// - [downloadUrl] -> direct download url to the new plugin.smplug file.
  /// - [version] of the new plugin.
  /// - [changelog] Optionally, a changelog for the update (markdown supported).
  ///
  /// If no update is available, it will return null.
  fun checkUpdate(currentConfig: Map) -> Future {
    var versionParts = currentConfig["version"].split(".")
    var major = int.parse(versionParts[0])
    var minor = int.parse(versionParts[1])
    var patch = int.parse(versionParts[2])

    return client.get_req(
      "https://api.github.com/repos/sonic-liberation/spotube-plugin-spotify/releases/latest",
      options: RequestOptions(
        headers: {
          "Accept": "application/vnd.github.v3+json"
        }.toJson()
      ),
    ).then((res) {
      var data = res.data
      var latestVersion = data["tag_name"].split(".")

      if (latestVersion.length < 3) {
        throw "Invalid version format from GitHub API. Expected format: <major>.<minor>.<patch>. Got: ${data["tag_name"]}"
      }

      var latestMajor = int.parse(latestVersion[0])
      var latestMinor = int.parse(latestVersion[1])
      var latestPatch = int.parse(latestVersion[2])

      var isUpdateAvailable = latestMajor > major ||
        (latestMajor == major && latestMinor > minor) ||
        (latestMajor == major && latestMinor == minor && latestPatch > patch)

      if (!isUpdateAvailable) return null

      var pluginFileAsset = data["assets"].firstWhere(
        (asset) => asset["name"] == "plugin.smplug",
        orElse: () => null
      )

      if (pluginFileAsset == null || pluginFileAsset["browser_download_url"] == null) {
        throw "No download URL found for the plugin update"
      }

      var changelog = data["body"] ?? "No changelog available"
      return {
        "downloadUrl": pluginFileAsset["browser_download_url"],
        "version": data["tag_name"],
        "changelog": changelog
      }.toJson()
    })
  }

    /// Returns the support information for the plugin in Markdown or plain text.
  /// Supports images and links.
  get support -> string {
    return supportStr
  }
}

export { CorePlugin }