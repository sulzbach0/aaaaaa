import "module:spotube_plugin" as spotube

import { SpotifyGqlApi } from '../../dependencies/hetu_spotify_gql_client/lib/assets/hetu/spotify_gql_api_client.ht'
import { Converters } from '../converter/converter.ht'
import { SpotifyAuthEndpoint } from "./auth.ht"

var Timezone = spotube.Timezone

class BrowseEndpoint {
  var client: SpotifyGqlApi
  var auth: SpotifyAuthEndpoint

  construct (this.client, this.auth)

  fun sections({offset: int, limit: int}) {
    return Timezone.getLocalTimeZone().then((timeZone){
      return client.browse.home(
        timeZone: timeZone,
        spTCookie: auth.credentials["cookies"].where((c)=>c["name"] == "sp_t").elementAt(0)["value"]
        limit: limit,
      ).then((sections){
        return {
          limit: limit ?? 20,
          nextOffset: null,
          hasMore: false,
          total: sections.length,
          items: sections.map((section) {            
            var playlists = section["items"].where((item) => item["objectType"] == "Playlist").toList()
            var albums = section["items"].where((item) => item["objectType"] == "Album").toList()
            var artists = section["items"].where((item) => item["objectType"] == "Artist").toList()
            
            return {
              id: section["id"],
              title: section["title"],
              externalUri: section["external_urls"]["spotify"] ?? "https://open.spotify.com/section/${section["id"]}",
              browseMore: true,
              items: [
                ...Converters.simplePlaylistsFromLibraryV3(playlists),
                ...Converters.simpleAlbums(albums),
                ...Converters.fullArtists(artists),
              ],
            }.toJson()
          }).toList()
        }.toJson()
      })
    })
  }

  fun sectionItems(id: string, {offset: int, limit: int}) {
    return Timezone.getLocalTimeZone().then((timeZone) {
      return client.browse.homeSection(
        id, 
        timeZone: timeZone,
        spTCookie: auth.credentials["cookies"].where((c)=>c["name"] == "sp_t").elementAt(0)["value"],
        offset: offset,
        limit: limit,
      ).then((section){
        return Converters.paginated(
          section,
          (items) {
            var playlists = section["items"].where((item) => item["objectType"] == "Playlist").toList()
            var albums = section["items"].where((item) => item["objectType"] == "Album").toList()
            var artists = section["items"].where((item) => item["objectType"] == "Artist").toList()

            return [
                ...Converters.simplePlaylistsFromLibraryV3(playlists),
                ...Converters.simpleAlbums(albums),
                ...Converters.fullArtists(artists),
              ]
          }
        )
      })
    })
  }
}