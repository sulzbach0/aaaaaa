import { SpotifyGqlApi } from '../../dependencies/hetu_spotify_gql_client/lib/assets/hetu/spotify_gql_api_client.ht'
import { Converters } from '../converter/converter.ht'

class PlaylistEndpoint {
  var client: SpotifyGqlApi

  construct (this.client)

  fun getPlaylist(id: string) {
    return client.playlist.getPlaylist(id).then((data) {
      return Converters.fullPlaylists([data])[0]
    })
  }

  fun tracks(id: string, { offset: int, limit: int }) {
    return client.playlist.tracks(id, offset: offset, limit: limit).then((data) {
      var paginated = Converters.paginated(
        data, 
        (items) => Converters.fullTracks(items.map((item)=>item["track"]).toList())
      )

      // Spotify playlists can contain local tracks which do not have an ID and cannot be played
      // We filter them out here to avoid issues in the client
      paginated["items"] = paginated["items"].where((item) => item != null && item["id"] != null).toList()

      return paginated
    })
  }

  fun create(userId: string, {
    name: string,
    description: string,
    public: bool,
    collaborative: bool
  }) {
    return client.playlist.create(
      userId,
      name: name,
      description: description,
      public: public,
      collaborative: collaborative
    ).then((data) {
      return Converters.fullPlaylists([data])[0]
    })
  }

  fun update(playlistId: string, {
    name: string,
    description: string,
    public: bool,
    collaborative: bool
  }) {
    return client.playlist.update(
      playlistId,
      name: name,
      description: description,
      public: public,
      collaborative: collaborative
    )
  }

  fun deletePlaylist(playlistId: string) {
    return this.unsave(playlistId)
  }

  fun addTracks(playlistId: string, { trackIds: List, position: int }) {
    return client.playlist.addTracks(
      playlistId,
      uris: trackIds.map((id)=>"spotify:track:${id}").toList(),
      position: position
    )
  }


  fun removeTracks(playlistId: string, { trackIds: List }) {
    return client.playlist.removeTracks(
      playlistId, 
      uris: trackIds.map((id)=>"spotify:track:${id}").toList()
    )
  }

  fun save(playlistId: string) {
    return client.playlist.follow(playlistId)
  }

  fun unsave(playlistId: string) {
    return client.playlist.unfollow(playlistId)
  }
}

export { PlaylistEndpoint }