import { SpotifyGqlApi } from '../../dependencies/hetu_spotify_gql_client/lib/assets/hetu/spotify_gql_api_client.ht'
import { Converters } from '../converter/converter.ht'

class UserEndpoint {
  var client: SpotifyGqlApi

  construct (this.client)
  
  fun me() {
    return client.user.me().then((data){
      return Converters.simpleUser(data)
    })
  }

  fun savedTracks({ offset: int, limit: int }) {
    return client.user.savedTracks(offset: offset, limit: limit).then(
      (data) => Converters.paginated(data, (items) => Converters.fullTracks(items))
    )
  }

  fun savedPlaylists({ offset: int, limit: int }) {
    return client.user.savedPlaylists(offset: offset, limit: limit).then((data){           
      return Converters.paginated(
        data, 
        (items) => Converters.simplePlaylistsFromLibraryV3(data["items"])
      )
    })
  }

  fun savedAlbums({ offset: int, limit: int }) {
    return client.user.savedAlbums(offset: offset, limit: limit).then((data){
      return Converters.paginated(
        data, 
        (items) => Converters.simpleAlbums(items)
      )
    })
  }

  fun savedArtists({ offset: int, limit: int }) {
    return client.user.savedArtists(offset: offset, limit: limit).then((data){
      return Converters.paginated(
        data, 
        (items) => Converters.fullArtists(items)
      )
    })
  }

  fun isSavedPlaylist(playlistId: string) { // Future<bool>
    return client.user.isPlaylistSaved(playlistId)
  }

  fun isSavedTracks(trackIds: List) { // Future<List<bool>>
    return client.user.isTracksSaved(trackIds)
  }

  fun isSavedAlbums(albumIds: List) { // Future<List<bool>>
    return client.user.isInLibrary(albumIds, itemType: "album")
  }

  fun isSavedArtists(artistIds: List) { // Future<List<bool>>
    return client.user.isInLibrary(artistIds, itemType: "artist")
  }
}

export { UserEndpoint }